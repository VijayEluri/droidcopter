package org.haldean.chopper;

import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.PrintWriter;
import java.net.Socket;
import java.net.UnknownHostException;

import android.os.Handler;
import android.os.Looper;
import android.os.Message;

public final class CommOut extends Thread implements Constants
{	
	private static Socket textsocket; //text communication
	private static Socket datasocket; //data communication
	
	private static PrintWriter textout; //outbound messages
	private static ObjectOutputStream dataout; //outbound objects--jpeg image.
	
	//private static boolean die = false; //signal used to kill the thread
	private static Handler mHandler;
	
	public static void sendMessage(String message) //for when other classes want to send a message back to the control computer
	{
		if (textout == null)
		{
			System.out.println("This message should not appear more than once.");
			return;
		}
		textout.println(message);
	}
	
	//main functionality
	public void run()
	{
		Looper.prepare();
		setName("CommOut");
		System.out.println("CommOut run() thread ID " + getId()); //for debugging
		try
		{
			//Try to connect, set up sockets
			System.out.println("Initializing network sockets... ");
			textsocket = new Socket(control, textoutport);
			textout = new PrintWriter(textsocket.getOutputStream(), true);
			
			datasocket = new Socket(control, dataoutport);
			dataout = new ObjectOutputStream(datasocket.getOutputStream());
			System.out.println("\tSockets initialized.");
		}
		//URL Messiness...
		catch (UnknownHostException e)
		{
			System.out.println("Bad Host");
			e.printStackTrace();
			System.exit(-1);
		}
		catch (IOException e)
		{
			System.out.println("uh oh");
			e.printStackTrace();
			System.exit(-1);
		}
		
		mHandler = new Handler() {
            public void handleMessage(Message msg)
            {
                switch (msg.what) {
                case SENDSTATUSUPDATE:
                	sendUpdate();
                	break;
                }
            }
        };
        //actual picture-taking and sending are run in separate threads, so the picture can be processed while other data is being sent.
		
		//This object takes pictures in an infinite loop.
		MakePicture takepic = new MakePicture();
		takepic.start();
		System.out.println("CommOut takepic thread ID " + takepic.getId());
		
		//This object sends pictures in an infinite loop.
		TransmitPicture transpic = new TransmitPicture(textout, dataout);
		System.out.println("CommOut transpic thread ID " + transpic.getId());
		transpic.start();
		
		mHandler.sendEmptyMessageDelayed(SENDSTATUSUPDATE, UPDATEINTERVAL);
		
        Looper.loop();
	}
	
	private static void sendUpdate()
	{		
		long starttime = System.currentTimeMillis(); //to ensure that messages are sent no faster than UPDATEINTERVAL
		
		//COMMUNICATION PROTOCOL: startsWith("DATA.") indicates to prep for a status update,
		
		//Send sensor data
		for (int i = 0; i < NUMSENSORS; i++)
		{
			textout.println("DATA~SENSOR~" + i + "~" + ChopperStatus.reading[i] + "~ACCURACY~" + ChopperStatus.accuracy[i] + "~TIMESTAMP~" + ChopperStatus.timestamp[i]);
		}
		
		//Send GPS data
		for (int i = 0; i < GPSFIELDS; i++)
		{
			textout.println("DATA~GPS~" + i + "~" + ChopperStatus.gps[i]);
		}
		textout.println("DATA~GPS~ACCURACY~" + ChopperStatus.gpsaccuracy);
		textout.println("DATA~GPS~TIMESTAMP~" + ChopperStatus.gpstimestamp);
		textout.println("DATA~GPS~NUMSATS~" + ChopperStatus.gpsnumsats);
		
		//Ensure loop time is no faster than UPDATEINTERVAL
		long endtime = System.currentTimeMillis();
		
		mHandler.sendEmptyMessageDelayed(SENDSTATUSUPDATE, Math.max(0, UPDATEINTERVAL - (endtime - starttime)));
	}
}
