package org.haldean.chopper;

//import android.graphics.PixelFormat;
import android.hardware.Camera;
import android.hardware.Camera.PictureCallback;

public class MakePicture extends Thread

{
	public static final int XPIC = 213; //Dimension of pictures.
	public static final int YPIC = 350;
	private static byte[] currpic; //buffer that stores the current picture
	private static boolean die = false; //thread loop termination switch
	
	public void run()
	{
		//Initialize the camera, get a lock
		Camera camera = Camera.open();
		
		/*
		//set specific parameters.  Later, may configure these to be operated remotely.
		Parameters params = camera.getParameters();
		params.setFlashMode(Parameters.FLASH_MODE_OFF);
		params.setPictureSize(XPIC, YPIC);
		params.setPictureFormat(PixelFormat.JPEG);
		
		//Loads the new parameters.  Necessary!
		camera.setParameters(params);
		*/
		
		//anonymous class, with instructions on what to do with the image data once available.
		

	//	while (!die)
		//{
			System.out.println("Trying...");
			camera.takePicture(null, SendPic, SendPic); //takes the pic
			System.out.println("done taking a picture");
			
		/*	try //pause until signalled; prevents the camera from wasting resources and taking more
			//pictures than we can use.
			{
				
				synchronized (this)
				{
					System.out.println("waiting");
					wait();
				}
			}
			catch (InterruptedException e)
			{
				e.printStackTrace();
			}
		}*/
		
		//releases the camera in preparation for thread termination
	//	camera.release();
	}
	
	Camera.PictureCallback SendPic = new Camera.PictureCallback() {
		public void onPictureTaken(byte[] imageData, Camera c) {

			if (imageData != null) {
				System.out.println("Picture succesfully taken.");			
			}
			else {
				System.out.println("Callback intiated, picture dumb.");
			}
		}
	};
	/*
	public static byte[] getPic() //returns the pictures stored in buffer.  MAY BE NULL
	{
		return currpic;
	}
	
	public static void clean() //resets the picture buffer to null.
	{
		currpic = null;
	}*/
}
