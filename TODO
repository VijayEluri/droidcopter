# -*- mode: org -*-
#+TODO: TODO PROGRESS | DONE IGNORE

* TODO First Programming Iteration
** DONE Automatic Frame Rate Compensation			  :Ben:
   CLOSED: [2010-05-03 Mon 22:18]*
** DONE Data receiver on chopper				  :Ben:
   CLOSED: [2010-05-03 Mon 22:19]
** DONE Data transmitter on host 				 :Will:
   CLOSED: [2010-05-02 Sun 21:00]
** IGNORE Authentication on server				       :Will:
** DONE Server-Chopper connectivity
*** DONE Implement heartbeat server-side			       :Will:
*** DONE Finish heartbeat chopper-side					:Ben:
*** DONE Code for possibly unreliable pices-server connection	       :Will:
*** DONE Code for full automatic telemetry reset (upon failure)	       :Will:
** PROGRESS Flight control					       :Will:
*** DONE Manual control of velocity via 360 controller    
*** PROGRESS Manual control of velocity via keyboard(/mouse)
**** TODO Add a flag to switch keyboard control on and off
*** DONE Interface droidcopter's autopilot subroutines    
**** DONE Turn autopilot on/off                         
**** DONE Locally create flight plan, submit to autopilot              
**** DONE Query autopilot for current flight plans      
**** DONE Visualization for autopilot interface          
** DONE Misc Fixes
*** DONE Don't send repeat commands for navigation
*** DONE Implement diagonal movement correctly
*** DONE Store JPEGs upon arrival
- Optionally, this could be on droidcopter, and the video stitching
  could be offloaded there.
** TODO Tune PID loops
   After doing more research, we've decided this can and should be
   done by hand.
** IGNORE Determine velocity through integrating acceleration
** TODO Navigation						  :Ben:
*** Figure out where it is
*** Figure out where to go
*** Figure out how to get there
*** Test the motherfucker                                        :Paul:
** DONE Host commands						 :Will:
** IGNORE Raw statistics					       :Will:
*** Visualization of bounds and accuracy
** DONE Acceleration visualization				 :Will:
   CLOSED: [2010-05-02 Sun 21:00]
*** Graphs of acceleration over time
*** Graph labels
*** Textual data
**** Running average
**** Delta from running average
**** Accuracy
** DONE Display flux magnitude (now flux x-component)		       :Will:
** DONE Pressure sensor as altimeter				 :Will:
   CLOSED: [2010-09-11 SAT 21:40]
** DONE Transmit battery data					  :Ben:
   CLOSED: [2010-09-11 SAT 21:41]
** DONE Visualize battery data					 :Will:
   CLOSED: [2010-09-11 SAT 21:41]

* TODO First Hardware Iteration					       :Will:
** DONE Build chopper					       :Will:
*** DONE Create design
*** DONE Order hardware
*** DONE Construct chopper
**** DONE Print chopper parts
**** DONE Physical assembly
**** DONE Electronics assembly
** DONE Arduino control of motors				       :Will:
** DONE Bluetooth connection from Arduino to Droid		       :Both:
** DONE Buy electronics						       :Both:
** IGNORE Pressure sensor
** IGNORE Ultrasonic rangefinder				       :Will:
** DONE Stress test motor controllers
** DONE Buy more motor controllers
** DONE Buy more more motor controllers
** DONE Buy more batteries
** DONE Hardware kill switch
** TODO Landing gear                                                   :Will:

* TODO Blob Tracking
** DONE Blob tracking algorithm
** TODO Blob tracking on Android
** TODO Blob tracking to velocity vector
** TODO Follow a big pink thing

* TODO Second Hardware Iteration				       :Will:
** TODO Ultrasonic or laser rangefinder
** TODO Structural pins for shear force in Brock		       :Will:

* TODO Second Software Iteration
** TODO Use rangefinder for landing					:Ben:
